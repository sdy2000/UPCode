@using Core.DTOs;
@using DataLayer.Entities.Courses;
@model Tuple<List<ShowCourseListItemViewModel>,int>

@{
    ViewData["Title"] = "Archive";
}


<div class="container">
    <nav aria-label="breadcrumb">
        <ul class="breadcrumb">
            <li class="breadcrumb-item"><a href="#">UPCode</a></li>
            <li class="breadcrumb-item active"><a href="#">Courses</a></li>
        </ul>
    </nav>
</div>


<div class="container">
    <form id="formFilter" id="pageid" action="/Course" method="get">

        <input type="hidden" name="pageId" value="@ViewBag.pageId.ToString()" />

        <section class="term-categories">

            <div class="top-bar">

                <header>
                    <span>
                        <a href="/Course" class="btn btn-success btn-outline">Reset</a>
                    </span>
                </header>

                <div class="row">
                    <div class="col-md-4 col-sm-12 col-xs-12 pull-right">
                        <div class="input">
                            <input type="text" name="filter" placeholder="Your Topic ...">
                            <button><i class="zmdi zmdi-search"></i></button>
                        </div>
                    </div>
                    <div class="col-md-4 col-sm-6 col-xs-12 pull-right">
                        <div class="switch-field available">
                            <input id="available-filter-1" name="getType" value="all" checked="" type="radio">
                            <label for="available-filter-1"> All </label>
                            <input id="available-filter-2" name="getType" value="buy" type="radio">
                            <label for="available-filter-2"> Buyable </label>
                            <input id="available-filter-3" name="getType" value="free" type="radio">
                            <label for="available-filter-3"> Free </label>
                        </div>
                    </div>
                    <div class="col-md-4 col-sm-6 col-xs-12 pull-left">
                        <div class="select-ddl">
                            <select name="orderByType">
                                <option value="date"> Date of Release </option>
                                <option value="updatedate"> Update date </option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">

                <aside class="col-lg-3 col-md-4 col-sm-12 col-xs-12">

                    <section class="aside-section filter-by-price">
                        <header><h3> Filter by price </h3></header>
                        <div class="price-range">
                            <input type="hidden" value="" id="min-value" name="startPrice">
                            <input type="hidden" value="" id="max-value" name="endPrice">
                            <div class="price-bar"><div id="priceFilter"></div></div>
                            <div class="max-price">to <span id="max-text">1000</span> $</div>
                            <div class="min-price">from <span id="min-text">0</span> $</div>
                            <div class="clearfix"></div>
                        </div>
                    </section>

                    <section class="aside-section filter-by-category">
                        <header><h3> Categories of topics </h3></header>
                        <div class="inner">
                            @{
                                List<CourseGroup> groups = ViewBag.Groups as List<CourseGroup>;
                                List<int> selected = ViewBag.SelectedGroups as List<int>;
                            }
                            <ul>
                                @foreach (var group in groups.Where(g => g.ParentId == null))
                                {

                                    <li>
                                        <input @((selected.Any(s=>s==group.GroupId)?"checked":"")) value="@group.GroupId"
                                           onchange="changeGroup()" type="checkbox" name="SelectedGroups" id="cat-1">
                                        <label for="cat-1"> @group.GroupTitle</label>
                                        @if (groups.Any(g => g.ParentId == group.GroupId))
                                        {
                                            <ul>
                                                @foreach (var sub in groups.Where(g => g.ParentId == group.GroupId))
                                                {
                                                    <li>
                                                        <input @((selected.Any(s=>s==sub.GroupId)?"checked":"")) value="@sub.GroupId"
                                                   onchange="changeGroup()" type="checkbox" name="SelectedGroups" id="cat-1">
                                                        <label for="cat-1"> @sub.GroupTitle</label>
                                                    </li>
                                                }
                                            </ul>
                                        }
                                    </li>
                                }
                            </ul>
                        </div>
                    </section>

                </aside>

                <div class="col-lg-9 col-md-8 col-sm-12 col-xs-12">

                    <section class="terms-items">

                        <div class="row">
                            <!-- col -->
                            @foreach (var item in Model.Item1)
                            {
                                <partial name="_BoxCourse" model="@item" />
                            }

                            <!-- /col -->
                        </div>


                        @if (Model.Item2 > 1)
                        {
                            <nav aria-label="Page navigation">
                                <ul class="pagination justify-content-center">
                                    @for (int i = 1; i <= Model.Item2; i++)
                                    {
                                        <li class="page-item"><a class="page-link" onclick="changPage(@i)" href="#">@i</a></li>
                                    }
                                </ul>
                            </nav>
                        }

                    </section>

                </div>
            </div>
        </section>
    </form>
</div>
@section Script{
    <script src="/noUiSlider/nouislider.min.js"></script>
    <script src="js/script.js"></script>
    <script type="text/javascript">


        function changPage(pageid){
            $("#pageid").val(pageid);
            $("#formFilter").submit();
        }


        $(function() {

            var slider = document.getElementById('priceFilter');
            noUiSlider.create(slider, {
                start: [20000, 100000],
                step: 5000,
                connect: true,
                direction: 'rtl',
                range: {
                    'min': 0,
                    'max': 1000
                }
            });

            var marginMin = document.getElementById('min-text'),
                marginMax = document.getElementById('max-text');

            slider.noUiSlider.on('update', function(values, handle) {
                var xvalue = Math.round(values[handle]);
                if (handle) {
                    marginMax.innerHTML = xvalue;
                } else {
                    marginMin.innerHTML = xvalue;
                }
                //console.log(values[handle]);
            });

            slider.noUiSlider.on('change', function(values, handle) {
                var xvalue = Math.round(values[handle]);
                if (handle) {
                    // setGetParameter('max_price', xvalue);
                    $('#max-value').val(xvalue);
                } else {
                    // setGetParameter('min_price', xvalue);
                    $('#min-value').val(xvalue);
                }
            });


            slider.noUiSlider.on('slide', function(values, handle) {

                console.log(values[0]);
                console.log(values[1]);

                var xvalue = Math.round(values[handle]);
                //updateSliderRange( Math.round(values[0]), Math.round(values[1]) );
            });



            function updateSliderRange(min, max) {
                slider.noUiSlider.updateOptions({
                    range: {
                        'min': min,
                        'max': max
                    }
                });
            }
        });

        function changeGroup() {
            $("#formFilter").submit();
        }
    </script>
}
